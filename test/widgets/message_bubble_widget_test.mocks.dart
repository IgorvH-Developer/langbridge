// Mocks generated by Mockito 5.4.6 from annotations
// in LangBridge/test/widgets/message_bubble_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:flutter/foundation.dart' as _i3;
import 'package:LangBridge/models/chat.dart' as _i5;
import 'package:LangBridge/models/message.dart' as _i6;
import 'package:LangBridge/models/transcription_data.dart' as _i8;
import 'package:LangBridge/repositories/chat_repository.dart' as _i4;
import 'package:LangBridge/services/chat_socket_service.dart' as _i2;
import 'package:LangBridge/services/webrtc_manager.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeChatSocketService_0 extends _i1.SmartFake
    implements _i2.ChatSocketService {
  _FakeChatSocketService_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeValueNotifier_1<T> extends _i1.SmartFake
    implements _i3.ValueNotifier<T> {
  _FakeValueNotifier_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ChatRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatRepository extends _i1.Mock implements _i4.ChatRepository {
  MockChatRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ChatSocketService get chatSocketService =>
      (super.noSuchMethod(
            Invocation.getter(#chatSocketService),
            returnValue: _FakeChatSocketService_0(
              this,
              Invocation.getter(#chatSocketService),
            ),
          )
          as _i2.ChatSocketService);

  @override
  _i3.ValueNotifier<List<_i5.Chat>> get chatsStream =>
      (super.noSuchMethod(
            Invocation.getter(#chatsStream),
            returnValue: _FakeValueNotifier_1<List<_i5.Chat>>(
              this,
              Invocation.getter(#chatsStream),
            ),
          )
          as _i3.ValueNotifier<List<_i5.Chat>>);

  @override
  _i3.ValueNotifier<List<_i6.Message>> get messagesStream =>
      (super.noSuchMethod(
            Invocation.getter(#messagesStream),
            returnValue: _FakeValueNotifier_1<List<_i6.Message>>(
              this,
              Invocation.getter(#messagesStream),
            ),
          )
          as _i3.ValueNotifier<List<_i6.Message>>);

  @override
  _i7.Future<void> fetchChats() =>
      (super.noSuchMethod(
            Invocation.method(#fetchChats, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i5.Chat?> getOrCreatePrivateChat(String? partnerId) =>
      (super.noSuchMethod(
            Invocation.method(#getOrCreatePrivateChat, [partnerId]),
            returnValue: _i7.Future<_i5.Chat?>.value(),
          )
          as _i7.Future<_i5.Chat?>);

  @override
  _i7.Future<_i5.Chat?> createNewChat(String? title) =>
      (super.noSuchMethod(
            Invocation.method(#createNewChat, [title]),
            returnValue: _i7.Future<_i5.Chat?>.value(),
          )
          as _i7.Future<_i5.Chat?>);

  @override
  _i7.Future<void> markChatAsRead(String? chatId) =>
      (super.noSuchMethod(
            Invocation.method(#markChatAsRead, [chatId]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> connectToChat(_i5.Chat? chat) =>
      (super.noSuchMethod(
            Invocation.method(#connectToChat, [chat]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  void sendChatMessage({
    required String? sender,
    required String? content,
    _i6.MessageType? type = _i6.MessageType.text,
  }) => super.noSuchMethod(
    Invocation.method(#sendChatMessage, [], {
      #sender: sender,
      #content: content,
      #type: type,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void disconnectFromChat() => super.noSuchMethod(
    Invocation.method(#disconnectFromChat, []),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Future<void> sendVideoMessage({
    required String? filePath,
    required String? chatId,
    required String? senderId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#sendVideoMessage, [], {
              #filePath: filePath,
              #chatId: chatId,
              #senderId: senderId,
            }),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> sendAudioMessage({
    required String? filePath,
    required String? chatId,
    required String? senderId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#sendAudioMessage, [], {
              #filePath: filePath,
              #chatId: chatId,
              #senderId: senderId,
            }),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i8.TranscriptionData?> transcribeMessage(String? messageId) =>
      (super.noSuchMethod(
            Invocation.method(#transcribeMessage, [messageId]),
            returnValue: _i7.Future<_i8.TranscriptionData?>.value(),
          )
          as _i7.Future<_i8.TranscriptionData?>);

  @override
  _i7.Future<void> fetchAndApplyTranscription(String? messageId) =>
      (super.noSuchMethod(
            Invocation.method(#fetchAndApplyTranscription, [messageId]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> saveTranscription(
    String? messageId,
    _i8.TranscriptionData? data,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveTranscription, [messageId, data]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}

/// A class which mocks [ChatSocketService].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatSocketService extends _i1.Mock implements _i2.ChatSocketService {
  MockChatSocketService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ValueNotifier<Map<String, dynamic>?> get signalingMessageNotifier =>
      (super.noSuchMethod(
            Invocation.getter(#signalingMessageNotifier),
            returnValue: _FakeValueNotifier_1<Map<String, dynamic>?>(
              this,
              Invocation.getter(#signalingMessageNotifier),
            ),
          )
          as _i3.ValueNotifier<Map<String, dynamic>?>);

  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);

  @override
  _i3.ValueNotifier<List<_i6.Message>> get messagesNotifier =>
      (super.noSuchMethod(
            Invocation.getter(#messagesNotifier),
            returnValue: _FakeValueNotifier_1<List<_i6.Message>>(
              this,
              Invocation.getter(#messagesNotifier),
            ),
          )
          as _i3.ValueNotifier<List<_i6.Message>>);

  @override
  set webRTCManager(_i9.WebRTCManager? value) => super.noSuchMethod(
    Invocation.setter(#webRTCManager, value),
    returnValueForMissingStub: null,
  );

  @override
  set currentChatId(String? value) => super.noSuchMethod(
    Invocation.setter(#currentChatId, value),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Future<void> connect(
    String? chatId,
    List<_i6.Message>? initialMessages,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#connect, [chatId, initialMessages]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  void sendSignalingMessage(Map<String, dynamic>? message) =>
      super.noSuchMethod(
        Invocation.method(#sendSignalingMessage, [message]),
        returnValueForMissingStub: null,
      );

  @override
  void sendMessage({
    required String? sender,
    required String? content,
    _i6.MessageType? type = _i6.MessageType.text,
  }) => super.noSuchMethod(
    Invocation.method(#sendMessage, [], {
      #sender: sender,
      #content: content,
      #type: type,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void disconnect() => super.noSuchMethod(
    Invocation.method(#disconnect, []),
    returnValueForMissingStub: null,
  );
}
